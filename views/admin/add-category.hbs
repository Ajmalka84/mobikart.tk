<main class="main" id="main">
<section class="vh-100" style="background-color: #eee;">
  <div class="container h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-lg-12 col-xl-11">
        <div class="card text-black" style="border-radius: 25px;">
          <div class="card-body p-md-5">
            <div class="row justify-content-center">
              <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4"></p>

                {{#if errMess}}
                <p class="text-center text-danger">{{errMess}}</p>
                {{/if}}

                <form class="mx-1 mx-md-4" action="/admin/categorymanagement/add" enctype="multipart/form-data" method="post">
                  
                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                    <div class="form-outline flex-fill mb-0">
                      <label class="form-label" for="email">Brand</label>
                      <input type="text" id="email" onkeyup="validateemail()" name="brand" class="form-control" />
                       <span class="text-danger" id="ErrorEmail"></span>
                    </div>
                  </div>

                  <div class="d-flex flex-row align-items-center mb-4">
                    <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                    <div class="form-outline flex-fill mb-0">
                      <label class="form-label" for="id_image">Brand Image</label>
                      <input type="file" class="form-control" id="id_image" name="image" data-bs-toggle="modal"
                          data-bs-target="#exampleModal" accept="image/*">
                       <span class="text-danger" id="ErrorEmail"></span>
                    </div>
                  </div>

                  

                  <div class="form-check d-flex justify-content-center mb-5">
                    <p class="text-danger">{{title}}</p>
                  </div>

                  <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                    <button type="submit" class="btn btn-primary btn-lg">Add category</button>
                  </div>

                </form>
              </div>
              <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp"
                  class="img-fluid" alt="Sample image">

              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

</main>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
         <div class="form-group row" id="image-box">
          </div>
          <button class="btn btn-outline-info" id="crop-btn" style="width: 100%; margin-top: 10px; display: none" type="button">Crop</button>
      </div>
      {{!-- <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
        
      </div> --}}
      <div class="modal-header text-center">
          <button class="btn btn-success" type="button" data-bs-dismiss="modal" aria-label="Close">Save
           Changes</button>
      </div>
    </div>
  </div>
</div>

{{!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"> --}}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

<script>
	// image-box is the id of the div element that will store our cropping image preview
	const imagebox = document.getElementById('image-box')
        // crop-btn is the id of button that will trigger the event of change original file with cropped file.
	const crop_btn = document.getElementById('crop-btn')
	// id_image is the id of the input tag where we will upload the image
	const input = document.getElementById('id_image')

	// When user uploads the image this event will get triggered
	input.addEventListener('change', ()=>{
	  // Getting image file object from the input variable
	  const img_data = input.files[0]
	  // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
	  // The new object URL represents the specified File object or Blob object.
	  const url = URL.createObjectURL(img_data)
	  
	  // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
	  imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

	  // Storing that cropping view image in a variable
	  const image = document.getElementById('image')

	  // Displaying the image box
	  document.getElementById('image-box').style.display = 'block'
	  // Displaying the Crop buttton
	  document.getElementById('crop-btn').style.display = 'block'
	  // Hiding the Post button
	  //document.getElementById('confirm-btn').style.display = 'none'

	  // Creating a croper object with the cropping view image
	  // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
	  // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
	  const cropper = new Cropper(image, {
	  autoCropArea: 1,
	  viewMode: 1,
	  scalable: false,
	  zoomable: false,
	  movable: false,
	  minCropBoxWidth: 50,
	  minCropBoxHeight: 50,
	  })

	  // When crop button is clicked this event will get triggered
	  crop_btn.addEventListener('click', ()=>{
	    // This method coverts the selected cropped image on the cropper canvas into a blob object
	    cropper.getCroppedCanvas().toBlob((blob)=>{
	      
	      // Gets the original image data
	      let fileInputElement = document.getElementById('id_image');
	      // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
	      let file = new File([blob], img_data.name,{type:"image/*", lastModified:new Date().getTime()});
	      // Create a new container
	      let container = new DataTransfer();
	      // Add the cropped image file to the container
	      container.items.add(file);
	      // Replace the original image file with the new cropped image file
	      fileInputElement.files = container.files;

	      // Hide the cropper box
	      document.getElementById('image-box').style.display = 'none'
	      // Hide the crop button
	      document.getElementById('crop-btn').style.display = 'none'
	      // Display the Post button
	      document.getElementById('confirm-btn').style.display = 'block'

	      });
	    });
	});	
</script>